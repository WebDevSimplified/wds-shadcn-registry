{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "password-input",
  "type": "registry:component",
  "description": "An input that can toggle visibility of the password text.",
  "registryDependencies": [
    "input",
    "button"
  ],
  "files": [
    {
      "path": "src/registry/new-york/items/password-input/components/password-input.tsx",
      "content": "\"use client\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { cn } from \"@/lib/utils\"\nimport { EyeIcon, EyeOffIcon } from \"lucide-react\"\nimport { useState, type ComponentProps, type ReactNode } from \"react\"\nimport {\n  PasswordInputContext,\n  usePasswordInput,\n} from \"./password-input-context\"\nimport type { PasswordStrengthConfig } from \"../types\"\nimport {\n  calculatePasswordStrength,\n  defaultConfig,\n  getStrengthColor,\n} from \"../utils\"\n\nexport function PasswordInput({\n  className,\n  children,\n  onChange,\n  value,\n  defaultValue,\n  ...props\n}: Omit<ComponentProps<typeof Input>, \"type\"> & {\n  children?: ReactNode\n}) {\n  const [showPassword, setShowPassword] = useState(false)\n  const [password, setPassword] = useState(String(defaultValue || \"\"))\n  const Icon = showPassword ? EyeOffIcon : EyeIcon\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = e.target.value\n    setPassword(newValue)\n    onChange?.(e)\n  }\n\n  const currentValue = value !== undefined ? value : password\n  const passwordValue = String(currentValue)\n\n  return (\n    <PasswordInputContext.Provider\n      value={{ password: passwordValue, showPassword }}\n    >\n      <div className=\"space-y-2\">\n        <div className=\"relative\">\n          <Input\n            {...props}\n            type={showPassword ? \"text\" : \"password\"}\n            className={cn(\"pr-9\", className)}\n            value={currentValue}\n            onChange={handleChange}\n          />\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            type=\"button\"\n            className=\"absolute inset-y-1/2 right-1 size-7 -translate-y-1/2\"\n            onClick={() => setShowPassword(p => !p)}\n          >\n            <Icon className=\"size-5\" />\n            <span className=\"sr-only\">\n              {showPassword ? \"Hide password\" : \"Show password\"}\n            </span>\n          </Button>\n        </div>\n        {children}\n      </div>\n    </PasswordInputContext.Provider>\n  )\n}\n\nexport function PasswordInputStrengthChecker({\n  className,\n  config: userConfig,\n}: {\n  className?: string\n  config?: PasswordStrengthConfig\n}) {\n  const { password } = usePasswordInput()\n\n  const config = { ...defaultConfig, ...userConfig }\n\n  const strength = calculatePasswordStrength(password, config)\n\n  if (!password) return null\n\n  const segmentValue = Math.min(\n    Math.ceil(\n      (strength.score / Math.max(...Object.values(config.thresholds))) *\n        config.segments,\n    ),\n    config.segments,\n  )\n\n  return (\n    <div className={cn(\"space-y-2\", className)}>\n      <div className=\"space-y-1\">\n        <div\n          role=\"progressbar\"\n          aria-label=\"Password Strength\"\n          aria-valuenow={segmentValue}\n          aria-valuemin={0}\n          aria-valuemax={config.segments}\n          aria-valuetext={strength.label}\n          className=\"flex space-x-1\"\n        >\n          {Array.from({ length: config.segments }, (_, i) => i + 1).map(\n            segmentIndex => (\n              <div\n                key={segmentIndex}\n                className={cn(\n                  \"h-1 flex-1 rounded-full transition-colors duration-200\",\n                  segmentValue >= segmentIndex\n                    ? getStrengthColor(strength.label)\n                    : \"bg-gray-200 dark:bg-gray-700\",\n                )}\n              />\n            ),\n          )}\n        </div>\n        <div className=\"flex items-center justify-end text-sm\">\n          <span className=\"font-medium text-black dark:text-white\">\n            {strength.label}\n          </span>\n        </div>\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:ui"
    }
  ]
}