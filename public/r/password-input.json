{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "password-input",
  "type": "registry:component",
  "description": "An input that can toggle visibility of the password text.",
  "registryDependencies": [
    "input",
    "button"
  ],
  "files": [
    {
      "path": "src/registry/new-york/items/password-input/components/password-input.tsx",
      "content": "\"use client\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { cn } from \"@/lib/utils\"\nimport { EyeIcon, EyeOffIcon } from \"lucide-react\"\nimport {\n  createContext,\n  useContext,\n  useEffect,\n  useState,\n  type ComponentProps,\n  type ReactNode,\n} from \"react\"\n\ntype PasswordInputContextType = {\n  password: string\n  showPassword: boolean\n}\n\nconst PasswordInputContext = createContext<\n  PasswordInputContextType | undefined\n>(undefined)\n\nexport const usePasswordInput = () => {\n  const context = useContext(PasswordInputContext)\n  if (!context) {\n    throw new Error(\"usePasswordInput must be used within a PasswordInput\")\n  }\n  return context\n}\n\nexport function PasswordInput({\n  className,\n  children,\n  onChange,\n  value,\n  defaultValue,\n  ...props\n}: Omit<ComponentProps<typeof Input>, \"type\"> & {\n  children?: ReactNode\n}) {\n  const [showPassword, setShowPassword] = useState(false)\n  const [password, setPassword] = useState(String(defaultValue || \"\"))\n  const Icon = showPassword ? EyeOffIcon : EyeIcon\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = e.target.value\n    setPassword(newValue)\n    onChange?.(e)\n  }\n\n  const currentValue = value !== undefined ? value : password\n  const passwordValue = String(currentValue)\n\n  return (\n    <PasswordInputContext.Provider\n      value={{ password: passwordValue, showPassword }}\n    >\n      <div className=\"space-y-2\">\n        <div className=\"relative\">\n          <Input\n            {...props}\n            type={showPassword ? \"text\" : \"password\"}\n            className={cn(\"pr-9\", className)}\n            value={currentValue}\n            onChange={handleChange}\n          />\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            type=\"button\"\n            className=\"absolute inset-y-1/2 right-1 size-7 -translate-y-1/2\"\n            onClick={() => setShowPassword(p => !p)}\n          >\n            <Icon className=\"size-5\" />\n            <span className=\"sr-only\">\n              {showPassword ? \"Hide password\" : \"Show password\"}\n            </span>\n          </Button>\n        </div>\n        {children}\n      </div>\n    </PasswordInputContext.Provider>\n  )\n}\n\ntype PasswordStrength = {\n  score: number\n  label: \"Weak\" | \"Good\" | \"Strong\"\n  checks: {\n    length: boolean\n    uppercase: boolean\n    lowercase: boolean\n    numbers: boolean\n    special: boolean\n  }\n}\n\nconst calculatePasswordStrength = (password: string): PasswordStrength => {\n  const checks = {\n    length: password.length >= 8,\n    uppercase: /[A-Z]/.test(password),\n    lowercase: /[a-z]/.test(password),\n    numbers: /\\d/.test(password),\n    special: /[!@#$%^&*(),.?\":{}|<>]/.test(password),\n  }\n\n  const score = Object.values(checks).filter(Boolean).length\n\n  let label: PasswordStrength[\"label\"] = \"Weak\"\n\n  if (score >= 4) {\n    label = \"Strong\"\n  } else if (score >= 3) {\n    label = \"Good\"\n  }\n\n  return { score, label, checks }\n}\n\nexport function PasswordInputStrengthChecker({\n  className,\n}: {\n  className?: string\n}) {\n  const { password } = usePasswordInput()\n  const [strength, setStrength] = useState<PasswordStrength>(() =>\n    calculatePasswordStrength(\"\"),\n  )\n\n  useEffect(() => {\n    const newStrength = calculatePasswordStrength(password)\n    setStrength(newStrength)\n  }, [password])\n\n  if (!password) return null\n\n  return (\n    <div className={cn(\"space-y-2\", className)}>\n      <div className=\"space-y-1\">\n        <div className=\"flex space-x-1\">\n          {[0, 1, 2].map(index => (\n            <div key={index} className=\"flex-1\">\n              <Progress\n                value={strength.score > index * 2 ? 100 : 0}\n                className=\"h-1\"\n                color={\n                  strength.score > index * 2 ? \"bg-green-400\" : \"bg-red-400\"\n                }\n              />\n            </div>\n          ))}\n        </div>\n        <div className=\"flex items-center justify-end text-sm\">\n          <span className=\"font-medium text-black\">{strength.label}</span>\n        </div>\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:ui"
    }
  ]
}